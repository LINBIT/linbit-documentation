# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-06-06 09:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ==
#, no-wrap
msgid "LINSTOR Volumes in Kubernetes"
msgstr "Kubernetes で LINSTOR ボリューム"

#. type: Plain text
msgid ""
"indexterm:[Kubernetes]This chapter describes the usage of LINSTOR in "
"Kubernetes as managed by the operator and with volumes provisioned using the "
"https://github.com/LINBIT/linstor-csi[LINSTOR CSI plugin]."
msgstr ""
"indexterm:[Kubernetes] この章では、オペレーターによって管理され、 https://"
"github.com/LINBIT/linstor-csi[LINSTOR CSI plugin] を使用してプロビジョニング"
"された KubernetesのLINSTORボリュームについて説明します。"

#. type: Title ===
#, no-wrap
msgid "Kubernetes Overview"
msgstr "Kubernetesの概要"

#. type: Plain text
msgid ""
"_Kubernetes_ is a container orchestrator. Kubernetes defines the behavior of "
"containers and related services via declarative specifications. In this "
"guide, we'll focus on using `kubectl` to manipulate `.yaml` files that "
"define the specifications of Kubernetes objects."
msgstr ""
"_Kubernetes_ はコンテナーオーケストレーターです。 Kubernetes は、宣言した仕様"
"に基づいてコンテナと関連サービスの動作を定義します。このガイドでは、"
"Kubernetes オブジェクトの仕様を定義する `.yaml` ファイルを介して `kubectl` を"
"使用することに焦点を当てます。"

#. type: Title ===
#, no-wrap
msgid "Deploying LINSTOR on Kubernetes"
msgstr "Kubernetes への LINSTOR のデプロイ"

#. type: Title ====
#, no-wrap
msgid "Deploying with the LINSTOR Operator"
msgstr "LINSTORオペレーターを使用したデプロイ"

#. type: Plain text
msgid ""
"LINBIT provides a LINSTOR operator to commercial support customers.  The "
"operator eases deployment of LINSTOR on Kubernetes by installing DRBD, "
"managing Satellite and Controller pods, and other related functions."
msgstr ""
"LINBIT は LINSTOR オペレーターを商用サポート顧客に提供します。オペレーター"
"は、DRBD のインストール、サテライトポッドとコントローラポッドの管理、およびそ"
"の他の関連機能により、LINSTOR を Kubernetes に簡単にデプロイできます。"

#. type: Plain text
msgid "The operator itself is installed using a Helm v3 chart as follows:"
msgstr ""
"オペレーター自体は、次のように Helm v3 チャートを使用してインストールされま"
"す。"

#. type: Plain text
msgid ""
"Label the worker nodes with `linstor.linbit.com/linstor-node=true` by "
"running:"
msgstr ""
"次のコマンドで `linstor.linbit.com/linstor-node=true` というラベルを稼働させ"
"るワーカーノードに付けます。"

#. type: delimited block -
#, no-wrap
msgid "kubectl label node <NODE_NAME> linstor.linbit.com/linstor-node=true\n"
msgstr "kubectl label node <NODE_NAME> linstor.linbit.com/linstor-node=true\n"

#. type: Plain text
msgid "Create a kubernetes secret containing your my.linbit.com credentials:"
msgstr "my.linbit.com 認証情報を含む kubernetes シークレットを作成します。"

#. type: delimited block -
#, no-wrap
msgid "kubectl create secret docker-registry drbdiocred --docker-server=drbd.io --docker-username=<YOUR_LOGIN> --docker-email=<YOUR_EMAIL> --docker-password=<YOUR_PASSWORD>\n"
msgstr "kubectl create secret docker-registry drbdiocred --docker-server=drbd.io --docker-username=<YOUR_LOGIN> --docker-email=<YOUR_EMAIL> --docker-password=<YOUR_PASSWORD>\n"

#. type: Plain text
msgid ""
"The name of this secret must match the one specified in the Helm values, by "
"default `drbdiocred`."
msgstr ""
"このシークレットの名前は、Helm 値で指定されたものと一致する必要があります。デ"
"フォルトは `drbdiocred` です。"

#. type: Plain text
msgid ""
"Configure storage for the LINSTOR etcd instance. There are various options "
"for configuring the etcd instance for LINSTOR:"
msgstr ""
"LINSTOR etcd インスタンスのストレージを構成します。LINSTOR の etcd インスタン"
"スを構成するためにいくつかオプションがあります。"

#. type: Plain text
msgid "Use an existing storage provisioner with a default `StorageClass`."
msgstr ""
"デフォルトの `StorageClass` で既存のストレージプロビジョナーを使用する。"

#. type: Plain text
msgid "<<s-kubernetes-etcd-hostpath-persistence,Use `hostPath` volumes>>."
msgstr ""
"<<s-kubernetes-etcd-hostpath-persistence, `hostPath` ボリュームを使用する。>>"

#. type: Plain text
msgid ""
"Disable persistence for basic testing. This can be done by adding `--set "
"etcd.persistence.enabled=false` to the `helm install` command below."
msgstr ""
"基本的なテストの永続化を無効にする。これは以下の `helm install` コマンドに "
"`--set etcd.persistence.enabled = false` を追加することで実行できます。"

#. type: Plain text
msgid ""
"Configuring the storage pools to be created. Storage pools can be created "
"directly with the helm deployment or at a later time.  <<s-kubernetes-"
"storage-pool-configuration,Learn more about it here>>.  If you do not "
"configure anything, no storage pools will be created."
msgstr ""
"作成するストレージプールを構成します。ストレージプールは、helm デプロイメント"
"で直接作成することができます。<<s-kubernetes-storage-pool-configuration, 詳細"
"はこちらを参照。>> 何も構成しない場合、ストレージプールは作成されません。"

#. type: Plain text
msgid ""
"Select the appropriate kernel module injector using `--set` with the `helm "
"install` command in the final step."
msgstr ""
"最後のステップとして `helm install` コマンドで `--set` を使用して、適切なカー"
"ネルモジュールインジェクタを選択します。"

#. type: Plain text
msgid ""
"Choose the injector according to the distribution you are using.  Select the "
"latest version from one of `drbd9-rhel7`, `drbd9-rhel8` or `drbd9-bionic` "
"from http://drbd.io/ as appropriate.  The drbd9-rhel8 image should also be "
"used for RHCOS (OpenShift). For example:"
msgstr ""
"使用しているディストリビューションに応じてインジェクターを選択してください。 "
"http://drbd.io/ の `drbd9-rhel7` 、 `drbd9-rhel8` 、または `drbd9-bionic` の"
"いずれかから最新バージョンを選択します。 drbd9-rhel8 イメージは、"
"RHCOS（OpenShift）でも使用されます。例えば："

#. type: delimited block -
#, no-wrap
msgid "operator.nodeSet.kernelModImage=drbd.io/drbd9-rhel8:v9.0.22-2\n"
msgstr "operator.nodeSet.kernelModImage=drbd.io/drbd9-rhel8:v9.0.22-2\n"

#. type: Plain text
msgid ""
"Disable kernel module injection if you are installing DRBD by other means."
msgstr ""
"他の方法で DRBD をインストールする場合は、カーネルモジュールインジェクション"
"を無効にします。"

#. type: delimited block -
#, no-wrap
msgid "operator.nodeSet.drbdKernelModuleInjectionMode=None\n"
msgstr "operator.nodeSet.drbdKernelModuleInjectionMode=None\n"

#. type: Plain text
msgid ""
"Finally create a Helm deployment named `linstor-op` that will set up "
"everything."
msgstr ""
"最後にすべてをセットアップする `linstor-op` という名前の Helm デプロイメント"
"を作成します。"

#. type: delimited block -
#, no-wrap
msgid ""
"helm repo add linstor https://charts.linstor.io\n"
"helm install linstor-op linstor/linstor\n"
msgstr ""
"helm repo add linstor https://charts.linstor.io\n"
"helm install linstor-op linstor/linstor\n"

#. type: Title =====
#, no-wrap
msgid "LINSTOR etcd `hostPath` persistence"
msgstr "LINSTOR etcd `hostPath` 永続化"

#. type: Plain text
msgid ""
"You can use the `pv-hostpath` Helm templates to create `hostPath` persistent "
"volumes. Create as many PVs as needed to satisfy your configured etcd "
"`replicaCount` (default 3)."
msgstr ""
"`pv-hostpath` Helm テンプレートを使用して、 `hostPath` 永続ボリュームを作成で"
"きます。構成された etcd の `replicaCount` を満たすために必要な数の PV を作成"
"します（デフォルト3）。"

#. type: Plain text
msgid ""
"Create the `hostPath` persistent volumes, substituting cluster node names "
"accordingly in the `nodes=` option:"
msgstr ""
"`nodePath =` オプションでクラスターノード名を指定して `hostPath` 永続ボリュー"
"ムを作成します。"

#. type: delimited block -
#, no-wrap
msgid ""
"helm repo add linstor https://charts.linstor.io\n"
"helm install linstor-etcd linstor/pv-hostpath --set \"nodes={<NODE0>,<NODE1>,<NODE2>}\"\n"
msgstr ""
"helm repo add linstor https://charts.linstor.io\n"
"helm install linstor-etcd linstor/pv-hostpath --set \"nodes={<NODE0>,<NODE1>,<NODE2>}\"\n"

#. type: Plain text
msgid ""
"Persistence for etcd is enabled by default. The `etcd.volumePermissions."
"enabled` key in the Helm values is also set so that the `hostPath` volumes "
"have appropriate permissions."
msgstr ""
"etcd の永続化はデフォルトで有効になっています。Helm値 の `etcd."
"volumePermissions.enabled` キーも設定され `hostPath` ボリュームに適切な権限が"
"付与されます。"

#. type: Title =====
#, no-wrap
msgid "Using an existing database"
msgstr "既存のデータベースの使用"

#. type: Plain text
msgid ""
"LINSTOR can connect to an existing PostgreSQL, MariaDB or etcd database. For "
"instance, for a PostgreSQL instance with the following configuration:"
msgstr ""
"LINSTOR は既存の PostgreSQL、MariaDB、etcd データベースに接続できます。たとえ"
"ば、次の構成は PostgresSQL インスタンスの場合です。"

#. type: delimited block -
#, no-wrap
msgid ""
"POSTGRES_DB: postgresdb\n"
"POSTGRES_USER: postgresadmin\n"
"POSTGRES_PASSWORD: admin123\n"
msgstr ""
"POSTGRES_DB: postgresdb\n"
"POSTGRES_USER: postgresadmin\n"
"POSTGRES_PASSWORD: admin123\n"

#. type: Plain text
msgid ""
"The Helm chart can be configured to use this database instead of deploying "
"an etcd cluster by adding the following to the Helm install command:"
msgstr ""
"Helm のインストールコマンドに以下を追加することにより、etcd クラスターをデプ"
"ロイする代わりにこのデータベースを使用するように Helm チャートを構成できま"
"す。"

#. type: delimited block -
#, no-wrap
msgid "--set etcd.enabled=false --set \"operator.controllerSet.dbConnectionURL=jdbc:postgresql://postgres/postgresdb?user=postgresadmin&password=admin123\"\n"
msgstr "--set etcd.enabled=false --set \"operator.controllerSet.dbConnectionURL=jdbc:postgresql://postgres/postgresdb?user=postgresadmin&password=admin123\"\n"

#. type: Title =====
#, no-wrap
msgid "Configuring storage pools"
msgstr "ストレージプールの構成"

#. type: Plain text
msgid ""
"The operator installed by helm can be used to create storage pools. Creation "
"is under control of the LinstorNodeSet resource:"
msgstr ""
"helm によってインストールされたオペレーターを使用して、ストレージプールを作成"
"できます。作成は LinstorNodeSet リソースの制御下にあります。"

#. type: delimited block -
#, no-wrap
msgid ""
"$ kubectl get LinstorNodeSet <nodeset> -o yaml\n"
"kind: LinstorNodeSet\n"
"metadata:\n"
"..\n"
"spec:\n"
"  ..\n"
"  storagePools:\n"
"    lvmPools:\n"
"    - name: lvm-thick\n"
"      volumeGroup: drbdpool\n"
"    lvmThinPools:\n"
"    - name: lvm-thin\n"
"      thinVolume: thinpool\n"
"      volumeGroup: drbdpool\n"
msgstr ""
"$ kubectl get LinstorNodeSet <nodeset> -o yaml\n"
"kind: LinstorNodeSet\n"
"metadata:\n"
"..\n"
"spec:\n"
"  ..\n"
"  storagePools:\n"
"    lvmPools:\n"
"    - name: lvm-thick\n"
"      volumeGroup: drbdpool\n"
"    lvmThinPools:\n"
"    - name: lvm-thin\n"
"      thinVolume: thinpool\n"
"      volumeGroup: drbdpool\n"

#. type: Plain text
msgid "There are two ways to configure storage pools"
msgstr "ストレージプールを構成するには2つの方法があります。"

#. type: Plain text
msgid "====== At install time"
msgstr "====== インストール時"

#. type: Plain text
msgid ""
"At install time, by setting the value of `operator.nodeSet.storagePools` "
"when running helm install."
msgstr ""
"インストール時の helm install を実行するときに `operator.nodeSet."
"storagePools` の値を設定します。"

#. type: Plain text
msgid "First create a file with the storage configuration like:"
msgstr "まず、次のようなストレージ構成でファイルを作成します。"

#. type: delimited block -
#, no-wrap
msgid ""
"operator:\n"
"  nodeSet:\n"
"    storagePools:\n"
"      lvmPools:\n"
"      - name: lvm-thick\n"
"        volumeGroup: drbdpool\n"
"      ..\n"
msgstr ""
"operator:\n"
"  nodeSet:\n"
"    storagePools:\n"
"      lvmPools:\n"
"      - name: lvm-thick\n"
"        volumeGroup: drbdpool\n"
"      ..\n"

#. type: Plain text
msgid "This file can be passed to the helm installation like this:"
msgstr "このファイルは、次のように helm インストールに渡すことができます。"

#. type: delimited block -
#, no-wrap
msgid "helm install linstor-op linstor/linstor -f <file> ..\n"
msgstr "helm install linstor-op linstor/linstor -f <file> ..\n"

#. type: Plain text
msgid "====== After install"
msgstr "====== インストール後"

#. type: Plain text
msgid ""
"On a cluster with the operator already configured (i.e. after `helm "
"install`), you can edit the nodeset configuration like this:"
msgstr ""
"オペレーターがすでに構成されているクラスター（つまり、 `helm install` の後）"
"では、次のようにしてノードセット構成を編集できます。"

#. type: delimited block -
#, no-wrap
msgid "$ kubectl edit LinstorNodeSet <nodeset>\n"
msgstr "$ kubectl edit LinstorNodeSet <nodeset>\n"

#. type: Plain text
msgid ""
"The storage pool configuration can be updated like in the example above."
msgstr "ストレージプールの構成は、上記の例のように更新できます。"

#. type: Title =====
#, no-wrap
msgid "Terminating Helm deployment"
msgstr "Helm デプロイメントの終了"

#. type: Plain text
msgid "The LINSTOR deployment can be terminated with:"
msgstr "LINSTOR のデプロイメントは次のコマンドで終了できます。"

#. type: delimited block -
#, no-wrap
msgid "helm delete linstor-op\n"
msgstr "helm delete linstor-op\n"

#. type: Plain text
msgid ""
"However due to the Helm’s current policy, the newly created Custom Resource "
"Definitions named `linstorcontrollerset` and `linstornodeset` will *not* be "
"deleted by the command. This will also cause the instances of those CRD’s "
"named `linstor-op-ns` and `linstor-op-cs` to remain running."
msgstr ""
"ただし Helm の現在のポリシーにより、新しく作成されたカスタムリソース定義 "
"`linstorcontrollerset` と `linstornodeset` はコマンドによって削除されません。"
"これにより、 これらの CRD インスタンスである `linstor-op-ns` と `linstor-op-"
"cs` もまた削除されず動作し続けます。"

#. type: Plain text
msgid "To terminate those instances after the `helm delete` command, run"
msgstr ""
"`helm delete` コマンドの後に、これらのインスタンスを終了するには以下を実行し"
"ます。"

#. type: delimited block -
#, no-wrap
msgid ""
"kubectl patch linstorcontrollerset linstor-op-cs -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge\n"
"kubectl patch linstornodeset linstor-op-ns -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge\n"
msgstr ""
"kubectl patch linstorcontrollerset linstor-op-cs -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge\n"
"kubectl patch linstornodeset linstor-op-ns -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge\n"

#. type: Plain text
msgid ""
"After that, all the instances created by the Helm deployment will be "
"terminated."
msgstr ""
"その後、Helm デプロイメントによって作成されたすべてのインスタンスが終了しま"
"す。"

#. type: Plain text
msgid ""
"More information regarding Helm’s current position on CRD’s can be found "
"https://helm.sh/docs/topics/chart_best_practices/custom_resource_definitions/"
"#method-1-let-helm-do-it-for-you[here]."
msgstr ""
"Helm の CRD に関する詳細情報は https://helm.sh/docs/topics/"
"chart_best_practices/custom_resource_definitions/#method-1-let-helm-do-it-"
"for-you[こちら] を参照ください。"

#. type: Title ====
#, no-wrap
msgid "Deploying with the Piraeus Operator"
msgstr "Piraeus オペレーターを使用したデプロイメント"

#. type: Plain text
msgid ""
"The community supported edition of the LINSTOR deployment in Kubernetes is "
"called Piraeus. The Piraeus project provides https://github.com/"
"piraeusdatastore/piraeus-operator[an operator] for deployment."
msgstr ""
"Kubernetes でコミュニティがサポートする LINSTOR デプロイメントのエディション"
"は、Piraeus と呼ばれます。Piraeus プロジェクトに関しては https://github.com/"
"piraeusdatastore/piraeus-operator[オペレータ] を参照ください。"

#. type: Title ===
#, no-wrap
msgid "Interacting with LINSTOR in Kubernetes"
msgstr "Kubernetes で LINSTOR の操作"

#. type: Plain text
msgid ""
"The Controller pod includes a LINSTOR Client, making it easy to interact "
"directly with LINSTOR.  For instance:"
msgstr ""
"コントローラポッドには LINSTOR クライアントが含まれているため、LINSTOR と直接"
"やり取りするのは簡単です。例えば："

#. type: delimited block -
#, no-wrap
msgid "kubectl exec linstor-op-cs-controller-0 -- linstor storage-pool list\n"
msgstr "kubectl exec linstor-op-cs-controller-0 -- linstor storage-pool list\n"

#. type: Plain text
msgid ""
"This should only be necessary for investigating problems and accessing "
"advanced functionality.  Regular operation such as creating volumes should "
"be achieved via the <<s-kubernetes-basic-configuration-and-deployment,"
"Kubernetes integration>>."
msgstr ""
"これは、問題を調査し、高度な機能にアクセスするためにのみ必要です。ボリューム"
"の作成などの通常の操作は <<s-kubernetes-basic-configuration-and-deployment,"
"Kubernetes の操作>> を参照ください。"

#. type: Title ===
#, no-wrap
msgid "LINSTOR CSI Plugin Deployment"
msgstr "LINSTOR CSIプラグインのデプロイメント"

#. type: Plain text
msgid ""
"The operator Helm chart deploys the LINSTOR CSI plugin for you so if you "
"used that, you can skip this section."
msgstr ""
"オペレーター Helm チャートは LINSTOR CSI プラグインをデプロイするため、Helm "
"チャートを使用した場合は、このセクションをスキップできます。"

#. type: Plain text
msgid ""
"If you are integrating LINSTOR using a different method, you will need to "
"install the LINSTOR CSI plugin.  Instructions for deploying the CSI plugin "
"can be found on the https://github.com/LINBIT/linstor-csi[project's github]. "
"This will result in a linstor-csi-controller _StatefulSet_ and a linstor-csi-"
"node _DaemonSet_ running in the kube-system namespace."
msgstr ""
"別の方法で LINSTOR を導入する場合は、LINSTOR CSI プラグインをインストールする"
"必要があります。CSIプラグインをデプロイするための手順は https://github.com/"
"LINBIT/linstor-csi[project's github] にあります。これにより linstor-csi-"
"controller _StatefulSet_ と linstor-csi-node _DaemonSet_ が kube-system 名前"
"空間で動作します。"

#. type: delimited block -
#, no-wrap
msgid ""
"NAME                       READY   STATUS    RESTARTS   AGE     IP              NODE\n"
"linstor-csi-controller-0   5/5     Running   0          3h10m   191.168.1.200   kubelet-a\n"
"linstor-csi-node-4fcnn     2/2     Running   0          3h10m   192.168.1.202   kubelet-c\n"
"linstor-csi-node-f2dr7     2/2     Running   0          3h10m   192.168.1.203   kubelet-d\n"
"linstor-csi-node-j66bc     2/2     Running   0          3h10m   192.168.1.201   kubelet-b\n"
"linstor-csi-node-qb7fw     2/2     Running   0          3h10m   192.168.1.200   kubelet-a\n"
"linstor-csi-node-zr75z     2/2     Running   0          3h10m   192.168.1.204   kubelet-e\n"
msgstr ""
"NAME                       READY   STATUS    RESTARTS   AGE     IP              NODE\n"
"linstor-csi-controller-0   5/5     Running   0          3h10m   191.168.1.200   kubelet-a\n"
"linstor-csi-node-4fcnn     2/2     Running   0          3h10m   192.168.1.202   kubelet-c\n"
"linstor-csi-node-f2dr7     2/2     Running   0          3h10m   192.168.1.203   kubelet-d\n"
"linstor-csi-node-j66bc     2/2     Running   0          3h10m   192.168.1.201   kubelet-b\n"
"linstor-csi-node-qb7fw     2/2     Running   0          3h10m   192.168.1.200   kubelet-a\n"
"linstor-csi-node-zr75z     2/2     Running   0          3h10m   192.168.1.204   kubelet-e\n"

#. type: Title ===
#, no-wrap
msgid "Basic Configuration and Deployment"
msgstr "基本的な構成とデプロイメント"

#. type: Plain text
msgid ""
"Once all linstor-csi __Pod__s are up and running, we can provision volumes "
"using the usual Kubernetes workflows."
msgstr ""
"すべての linstor-csi __Pod__ が稼働したら、通常のKubernetesワークフローを使用"
"してボリュームをプロビジョニングできます。"

#. type: Plain text
msgid ""
"Configuring the behavior and properties of LINSTOR volumes deployed via "
"Kubernetes is accomplished via the use of __StorageClass__es."
msgstr ""
"Kubernetes を介してデプロイされた LINSTOR ボリュームの動作とプロパティの構成"
"は __StorageClass__es を使用して行います。"

#. type: Plain text
msgid ""
"the \"resourceGroup\" parameter is mandatory. Usually you want it to be "
"unique and the same as the storage class name."
msgstr ""
"\"resourceGroup\" パラメータは必須です。通常、一意にしてストレージクラス名と"
"同じにします。"

#. type: Plain text
msgid ""
"Here below is the simplest practical _StorageClass_ that can be used to "
"deploy volumes:"
msgstr ""
"以下は、ボリュームのデプロイに使用できる最も単純で実用的な _StorageClass_ で"
"す。"

#. type: Block title
#, no-wrap
msgid "linstor-basic-sc.yaml"
msgstr "linstor-basic-sc.yaml"

#. type: delimited block -
#, no-wrap
msgid ""
"apiVersion: storage.k8s.io/v1beta1\n"
"kind: StorageClass\n"
"metadata:\n"
"  # The name used to identify this StorageClass.\n"
"  name: linstor-basic-storage-class\n"
"  # The name used to match this StorageClass with a provisioner.\n"
"  # linstor.csi.linbit.com is the name that the LINSTOR CSI plugin uses to identify itself\n"
"provisioner: linstor.csi.linbit.com\n"
"parameters:\n"
"  # LINSTOR will provision volumes from the drbdpool storage pool configured\n"
"  # On the satellite nodes in the LINSTOR cluster specified in the plugin's deployment\n"
"  storagePool: \"drbdpool\"\n"
"  resourceGroup: \"linstor-basic-storage-class\"\n"
msgstr ""
"apiVersion: storage.k8s.io/v1beta1\n"
"kind: StorageClass\n"
"metadata:\n"
"  # The name used to identify this StorageClass.\n"
"  name: linstor-basic-storage-class\n"
"  # The name used to match this StorageClass with a provisioner.\n"
"  # linstor.csi.linbit.com is the name that the LINSTOR CSI plugin uses to identify itself\n"
"provisioner: linstor.csi.linbit.com\n"
"parameters:\n"
"  # LINSTOR will provision volumes from the drbdpool storage pool configured\n"
"  # On the satellite nodes in the LINSTOR cluster specified in the plugin's deployment\n"
"  storagePool: \"drbdpool\"\n"
"  resourceGroup: \"linstor-basic-storage-class\"\n"

#. type: Plain text
msgid ""
"DRBD options can be set as well in the parameters section. Valid keys are "
"defined in the https://app.swaggerhub.com/apis-docs/Linstor/Linstor[LINSTOR "
"REST-API] (e.g., `DrbdOptions/Net/allow-two-primaries: \"yes\"`)."
msgstr ""
"DRBD オプションは、パラメーターセクションでも設定できます。有効なキーは "
"https://app.swaggerhub.com/apis-docs/Linstor/Linstor[LINSTOR REST-API] (e."
"g., `DrbdOptions/Net/allow-two-primaries: \"yes\"`) で定義されています。"

#. type: Plain text
msgid "We can create the _StorageClass_ with the following command:"
msgstr "次のコマンドで _StorageClass_ を作成できます。"

#. type: delimited block -
#, no-wrap
msgid "kubectl create -f linstor-basic-sc.yaml\n"
msgstr "kubectl create -f linstor-basic-sc.yaml\n"

#. type: Plain text
msgid ""
"Now that our _StorageClass_ is created, we can now create a "
"_PersistentVolumeClaim_ which can be used to provision volumes known both to "
"Kubernetes and LINSTOR:"
msgstr ""
"_StorageClass_ が作成されたので、KubernetesとLINSTOR の両方に認識されるボ"
"リュームをプロビジョニングするために使用できる _PersistentVolumeClaim_ を作成"
"できます。"

#. type: Block title
#, no-wrap
msgid "my-first-linstor-volume-pvc.yaml"
msgstr "my-first-linstor-volume-pvc.yaml"

#. type: delimited block -
#, no-wrap
msgid ""
"kind: PersistentVolumeClaim\n"
"apiVersion: v1\n"
"metadata:\n"
"  name: my-first-linstor-volume\n"
"  annotations:\n"
"    # This line matches the PersistentVolumeClaim with our StorageClass\n"
"    # and therefore our provisioner.\n"
"    volume.beta.kubernetes.io/storage-class: linstor-basic-storage-class\n"
"spec:\n"
"  accessModes:\n"
"    - ReadWriteOnce\n"
"  resources:\n"
"    requests:\n"
"      storage: 500Mi\n"
msgstr ""
"kind: PersistentVolumeClaim\n"
"apiVersion: v1\n"
"metadata:\n"
"  name: my-first-linstor-volume\n"
"  annotations:\n"
"    # This line matches the PersistentVolumeClaim with our StorageClass\n"
"    # and therefore our provisioner.\n"
"    volume.beta.kubernetes.io/storage-class: linstor-basic-storage-class\n"
"spec:\n"
"  accessModes:\n"
"    - ReadWriteOnce\n"
"  resources:\n"
"    requests:\n"
"      storage: 500Mi\n"

#. type: Plain text
msgid "We can create the _PersistentVolumeClaim_ with the following command:"
msgstr "次のコマンドで _PersistentVolumeClaim_ を作成できます。"

#. type: delimited block -
#, no-wrap
msgid "kubectl create -f my-first-linstor-volume-pvc.yaml\n"
msgstr "kubectl create -f my-first-linstor-volume-pvc.yaml\n"

#. type: Plain text
msgid ""
"This will create a _PersistentVolumeClaim_ known to Kubernetes, which will "
"have a _PersistentVolume_ bound to it, additionally LINSTOR will now create "
"this volume according to the configuration defined in the `linstor-basic-"
"storage-class` _StorageClass_. The LINSTOR volume's name will be a UUID "
"prefixed with `csi-` This volume can be observed with the usual `linstor "
"resource list`. Once that volume is created, we can attach it to a pod. The "
"following _Pod_ spec will spawn a Fedora container with our volume attached "
"that busy waits so it is not unscheduled before we can interact with it:"
msgstr ""
"これは Kubernetes に認識されている _PersistentVolumeClaim_ を作成し、それに "
"_PersistentVolume_ がバインドされます。さらにLINSTORは `linstor-basic-"
"storage-class` _StorageClass_ で定義された設定に従ってこのボリュームを作成し"
"ます。 LINSTORボリュームの名前は `csi-` という接頭辞が付いたUUIDになります。"
"このボリュームは通常の `linstor resource list` で見ることができます。一度ボ"
"リュームが作成されたら、それを pod にアタッチすることができます。以下の pod "
"仕様はFedoraコンテナを作成し、ビジーウェイトするので、アンスケジュールされま"
"せん。"

#. type: Block title
#, no-wrap
msgid "my-first-linstor-volume-pod.yaml"
msgstr "my-first-linstor-volume-pod.yaml"

#. type: delimited block -
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: Pod\n"
"metadata:\n"
"  name: fedora\n"
"  namespace: default\n"
"spec:\n"
"  containers:\n"
"  - name: fedora\n"
"    image: fedora\n"
"    command: [/bin/bash]\n"
"    args: [\"-c\", \"while true; do sleep 10; done\"]\n"
"    volumeMounts:\n"
"    - name: my-first-linstor-volume\n"
"      mountPath: /data\n"
"    ports:\n"
"    - containerPort: 80\n"
"  volumes:\n"
"  - name: my-first-linstor-volume\n"
"    persistentVolumeClaim:\n"
"      claimName: \"my-first-linstor-volume\"\n"
msgstr ""
"apiVersion: v1\n"
"kind: Pod\n"
"metadata:\n"
"  name: fedora\n"
"  namespace: default\n"
"spec:\n"
"  containers:\n"
"  - name: fedora\n"
"    image: fedora\n"
"    command: [/bin/bash]\n"
"    args: [\"-c\", \"while true; do sleep 10; done\"]\n"
"    volumeMounts:\n"
"    - name: my-first-linstor-volume\n"
"      mountPath: /data\n"
"    ports:\n"
"    - containerPort: 80\n"
"  volumes:\n"
"  - name: my-first-linstor-volume\n"
"    persistentVolumeClaim:\n"
"      claimName: \"my-first-linstor-volume\"\n"

#. type: Plain text
msgid "We can create the _Pod_ with the following command:"
msgstr "次のコマンドで _Pod_ を作成できます。"

#. type: delimited block -
#, no-wrap
msgid "kubectl create -f my-first-linstor-volume-pod.yaml\n"
msgstr "kubectl create -f my-first-linstor-volume-pod.yaml\n"

#. type: Plain text
msgid ""
"Running `kubectl describe pod fedora` can be used to confirm that _Pod_ "
"scheduling and volume attachment succeeded."
msgstr ""
"`kubectl describe pod fedora` を実行することで _Pod_ がスケジュールされ、ボ"
"リュームが正しく割り当てられたのを確認できます。"

#. type: Plain text
msgid ""
"To remove a volume, please ensure that no pod is using it and then delete "
"the _PersistentVolumeClaim_ via `kubectl`. For example, to remove the volume "
"that we just made, run the following two commands, noting that the _Pod_ "
"must be unscheduled before the _PersistentVolumeClaim_ will be removed:"
msgstr ""
"ボリュームを削除するにはpodがもう使われていないことを確認してから、`kubectl` "
"を使ってPersistentVolumeClaimを削除します。例えば、先ほど作成したボリュームを"
"削除するには、以下のコマンドを実行します。ボリュームが削除される前にpodのスケ"
"ジュールを解除する必要があります。"

#. type: delimited block -
#, no-wrap
msgid "kubectl delete pod fedora # unschedule the pod.\n"
msgstr "kubectl delete pod fedora # podをアンスケジュール。\n"

#. type: delimited block -
#, no-wrap
msgid "kubectl get pod -w # wait for pod to be unscheduled\n"
msgstr "kubectl get pod -w # podがアンスケジュールされるまで待つ\n"

#. type: delimited block -
#, no-wrap
msgid "kubectl delete pvc my-first-linstor-volume # remove the PersistentVolumeClaim, the PersistentVolume, and the LINSTOR Volume.\n"
msgstr "kubectl delete pvc my-first-linstor-volume # PersistentVolumeClaim、PersistentVolume、Linstorボリュームを削除する。\n"

#. type: Title ===
#, no-wrap
msgid "Snapshots"
msgstr "スナップショット"

#. type: Plain text
msgid ""
"Creating <<s-linstor-snapshots, snapshots>> and creating new volumes from "
"snapshots is done via the use of __VolumeSnapshot__s, "
"__VolumeSnapshotClass__es, and __PVC__s. First, add the optional CSI "
"snapshotter to your cluster:"
msgstr ""
"<<s-linstor-snapshots, スナップショット>> の作成とスナップショットから新規ボ"
"リュームを作成するには __VolumeSnapshot__, __VolumeSnapshotClass__,  __PVC__ "
"を通して行われます。最初にオプションの CSI snapshotter をクラスタに追加しま"
"す。"

#. type: delimited block -
#, no-wrap
msgid ""
"git clone https://github.com/kubernetes-csi/external-snapshotter.git\n"
"cd external-snapshotter\n"
"kubectl create -f config/crd\n"
"kubectl create -f deploy/kubernetes/snapshot-controller\n"
msgstr ""
"git clone https://github.com/kubernetes-csi/external-snapshotter.git\n"
"cd external-snapshotter\n"
"kubectl create -f config/crd\n"
"kubectl create -f deploy/kubernetes/snapshot-controller\n"

#. type: Plain text
msgid ""
"More detailed installation instructions can be found on the https://github."
"com/kubernetes-csi/external-snapshotter#usage[project site]"
msgstr ""
"詳細なインストール手順は https://github.com/kubernetes-csi/external-"
"snapshotter#usage[project site] を参照ください。"

#. type: Plain text
msgid "Then we can create our _VolumeSnapshotClass_:"
msgstr "それで _VolumeSnapshotClass_ を作成できます。"

#. type: Block title
#, no-wrap
msgid "my-first-linstor-snapshot-class.yaml"
msgstr "my-first-linstor-snapshot-class.yaml"

#. type: delimited block -
#, no-wrap
msgid ""
"apiVersion: snapshot.storage.k8s.io/v1beta1\n"
"kind: VolumeSnapshotClass\n"
"metadata:\n"
"  name: my-first-linstor-snapshot-class\n"
"driver: linstor.csi.linbit.com\n"
"deletionPolicy: Delete\n"
msgstr ""
"apiVersion: snapshot.storage.k8s.io/v1beta1\n"
"kind: VolumeSnapshotClass\n"
"metadata:\n"
"  name: my-first-linstor-snapshot-class\n"
"driver: linstor.csi.linbit.com\n"
"deletionPolicy: Delete\n"

#. type: Plain text
msgid "Create the _VolumeSnapshotClass_ with `kubectl`:"
msgstr "`kubectl` を使用して _VolumeSnapshotClass_ を作成します。"

#. type: delimited block -
#, no-wrap
msgid "kubectl create -f my-first-linstor-snapshot-class.yaml\n"
msgstr "kubectl create -f my-first-linstor-snapshot-class.yaml\n"

#. type: Plain text
msgid ""
"Now we will create a volume snapshot for the volume that we created above. "
"This is done with a _VolumeSnapshot_:"
msgstr ""
"次に上記で作成したボリュームのボリュームスナップショットを作成します。これは "
"_VolumeSnapshot_ を使用します。"

#. type: Block title
#, no-wrap
msgid "my-first-linstor-snapshot.yaml"
msgstr "my-first-linstor-snapshot.yaml"

#. type: delimited block -
#, no-wrap
msgid ""
"apiVersion: snapshot.storage.k8s.io/v1beta1\n"
"kind: VolumeSnapshot\n"
"metadata:\n"
"  name: my-first-linstor-snapshot\n"
"spec:\n"
"  volumeSnapshotClassName: my-first-linstor-snapshot-class\n"
"  source:\n"
"    persistentVolumeClaimName: my-first-linstor-volume\n"
msgstr ""
"apiVersion: snapshot.storage.k8s.io/v1beta1\n"
"kind: VolumeSnapshot\n"
"metadata:\n"
"  name: my-first-linstor-snapshot\n"
"spec:\n"
"  volumeSnapshotClassName: my-first-linstor-snapshot-class\n"
"  source:\n"
"    persistentVolumeClaimName: my-first-linstor-volume\n"

#. type: Plain text
msgid "Create the _VolumeSnapshot_ with `kubectl`:"
msgstr "`kubectl` を使用して _VolumeSnapshot_ を作成します。"

#. type: delimited block -
#, no-wrap
msgid "kubectl create -f my-first-linstor-snapshot.yaml\n"
msgstr "kubectl create -f my-first-linstor-snapshot.yaml\n"

#. type: Plain text
msgid "You can check that the snapshot creation was successful"
msgstr "スナップショットの作成が成功したことを確認できます。"

#. type: delimited block -
#, no-wrap
msgid ""
"kubectl describe volumesnapshots.snapshot.storage.k8s.io my-first-linstor-snapshot\n"
"...\n"
"Spec:\n"
"  Source:\n"
"    Persistent Volume Claim Name:  my-first-linstor-snapshot\n"
"  Volume Snapshot Class Name:      my-first-linstor-snapshot-class\n"
"Status:\n"
"  Bound Volume Snapshot Content Name:  snapcontent-b6072ab7-6ddf-482b-a4e3-693088136d2c\n"
"  Creation Time:                       2020-06-04T13:02:28Z\n"
"  Ready To Use:                        true\n"
"  Restore Size:                        500Mi\n"
msgstr ""
"kubectl describe volumesnapshots.snapshot.storage.k8s.io my-first-linstor-snapshot\n"
"...\n"
"Spec:\n"
"  Source:\n"
"    Persistent Volume Claim Name:  my-first-linstor-snapshot\n"
"  Volume Snapshot Class Name:      my-first-linstor-snapshot-class\n"
"Status:\n"
"  Bound Volume Snapshot Content Name:  snapcontent-b6072ab7-6ddf-482b-a4e3-693088136d2c\n"
"  Creation Time:                       2020-06-04T13:02:28Z\n"
"  Ready To Use:                        true\n"
"  Restore Size:                        500Mi\n"

#. type: Plain text
msgid "Finally, we'll create a new volume from the snapshot with a _PVC_."
msgstr "最後にスナップショットから _PVC_ で新しいボリュームを作成します。"

#. type: Block title
#, no-wrap
msgid "my-first-linstor-volume-from-snapshot.yaml"
msgstr "my-first-linstor-volume-from-snapshot.yaml"

#. type: delimited block -
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: PersistentVolumeClaim\n"
"metadata:\n"
"  name: my-first-linstor-volume-from-snapshot\n"
"spec:\n"
"  storageClassName: linstor-basic-storage-class\n"
"  dataSource:\n"
"    name: my-first-linstor-snapshot\n"
"    kind: VolumeSnapshot\n"
"    apiGroup: snapshot.storage.k8s.io\n"
"  accessModes:\n"
"    - ReadWriteOnce\n"
"  resources:\n"
"    requests:\n"
"      storage: 500Mi\n"
msgstr ""
"apiVersion: v1\n"
"kind: PersistentVolumeClaim\n"
"metadata:\n"
"  name: my-first-linstor-volume-from-snapshot\n"
"spec:\n"
"  storageClassName: linstor-basic-storage-class\n"
"  dataSource:\n"
"    name: my-first-linstor-snapshot\n"
"    kind: VolumeSnapshot\n"
"    apiGroup: snapshot.storage.k8s.io\n"
"  accessModes:\n"
"    - ReadWriteOnce\n"
"  resources:\n"
"    requests:\n"
"      storage: 500Mi\n"

#. type: Plain text
msgid "Create the _PVC_ with `kubectl`:"
msgstr "`kubectl` を使用して _PVC_ を作成します。"

#. type: delimited block -
#, no-wrap
msgid "kubectl create -f my-first-linstor-volume-from-snapshot.yaml\n"
msgstr "kubectl create -f my-first-linstor-volume-from-snapshot.yaml\n"

#. type: Title ===
#, no-wrap
msgid "Volume Accessibility"
msgstr "ボリュームへのアクセス"

#.  This only covers DRBD volumes, section might change if linked docs are updated.
#. type: Plain text
msgid ""
"LINSTOR volumes are typically accessible both locally and <<s-drbd_clients,"
"over the network>>."
msgstr ""
"LINSTORボリュームは通常、ローカルか <<s-drbd_clients,クライアント>> としてア"
"クセスされます。"

#. type: Plain text
msgid ""
"By default, the CSI plugin will attach volumes directly if the _Pod_ happens "
"to be scheduled on a _kubelet_ where its underlying storage is present. "
"However, _Pod_ scheduling does not currently take volume locality into "
"account. The <<s-kubernetes-replicasonsame,replicasOnSame>> parameter can be "
"used to restrict where the underlying storage may be provisioned, if locally "
"attached volumes are desired."
msgstr ""
"_Pod_ がその基礎となるストレージが存在する _kubelet_ にスケジュールされている"
"場合、デフォルトでCSIプラグインはボリュームを直接接続します。しかしPod スケ"
"ジューリングは現在ボリュームがローカルかどうか考慮に入れていません。 <<s-"
"kubernetes-replicasonsame,replicasOnSame>> パラメータで、ローカルに接続された"
"ボリュームが必要な場合、ストレージをプロビジョニングできる場所を制限できま"
"す。"

#. type: Plain text
msgid ""
"See <<s-kubernetes-localstoragepolicy,localStoragePolicy>> to see how this "
"default behavior can be modified."
msgstr ""
"このデフォルトの動作を変更するには <<s-kubernetes-localstoragepolicy,"
"localStoragePolicy>> を参照ください。"

#. type: Title ===
#, no-wrap
msgid "Volume Locality Optimization using Stork"
msgstr "Stork を使用したボリューム局所性最適化"

#. type: Plain text
msgid ""
"Stork is a scheduler extender plugin for Kubernetes which allows a storage "
"driver to give the Kubernetes scheduler hints about where to place a new pod "
"so that it is optimally located for storage performance. You can learn more "
"about the project on its https://portworx.com/stork-storage-orchestration-"
"kubernetes/[GitHub page]."
msgstr ""
"Stork は、Kubernetes のスケジューラ拡張プラグインであり、ストレージドライバー"
"は、Kubernetes スケジューラーに新しいポッドを配置する場所に関するヒントを与"
"え、ストレージパフォーマンスのために最適な場所に配置できるようにします。プロ"
"ジェクトの詳細については、 https://portworx.com/stork-storage-orchestration-"
"kubernetes/[GitHub ページ] 参照ください。"

#. type: Plain text
msgid ""
"We are currently working with the maintainers behind Stork to have a LINSTOR "
"driver shipped with it by default. In the meantime, you can use a custom-"
"built Stork container by LINBIT which includes a LINSTOR driver, https://hub."
"docker.com/repository/docker/linbit/stork[available on Docker Hub]"
msgstr ""
"現在、LINBIT は Stork のメンテナーと協力して、デフォルトで LINSTOR ドライバー"
"が同梱されるよう作業しています。それまでの間は https://hub.docker.com/"
"repository/docker/linbit/stork[Docker ハブで利用可能] から LINBIT によってカ"
"スタム構築された LINSTOR ドライバー を含む Stork コンテナを使用できます。"

#. type: Title ====
#, no-wrap
msgid "Deploying Stork alongside the LINSTOR Operator"
msgstr "LINSTOR オペレーターと一緒に Stork をデプロイする"

#. type: Plain text
msgid ""
"In order to make Stork talk to LINSTOR, we need to instantiate a few "
"components in our Kubernetes cluster. First, we need to create a Stork "
"deployment.  This is easiest done with a yaml file supplied by the Stork "
"project: https://github.com/libopenstorage/stork/blob/master/specs/stork-"
"deployment.yaml[stork-deployment.yaml]"
msgstr ""
"Stork を LINSTOR と通信させるには、Kubernetes クラスターでいくつかのコンポー"
"ネントをインスタンス化する必要があります。まず、Stork のデプロイメントを作成"
"する必要があります。これは、Stork プロジェクトによって提供される yaml ファイ"
"ルで最も簡単に実行できます。 https://github.com/libopenstorage/stork/blob/"
"master/specs/stork-deployment.yaml[stork-deployment.yaml]"

#. type: Plain text
msgid ""
"However, a few things need to be adjusted for this deployment to work with "
"LINSTOR.  Specifically, there is this section within the _Deployment_ part:"
msgstr ""
"ただし、このデプロイメントを LINSTOR と連携させるには、いくつかの調整が必要で"
"す。例えば _Deployment_ パーツ内に次のセクションがあります。"

#. type: delimited block -
#, no-wrap
msgid ""
"spec:\n"
"      containers:\n"
"      - command:\n"
"        - /stork\n"
"        - --driver=pxd\n"
"        - --verbose\n"
"        - --leader-elect=true\n"
"        # Uncomment the line below if you want to enable the feature to\n"
"        # automatically update schedulerName\n"
"        #- --app-initializer=true\n"
"        imagePullPolicy: Always\n"
"        image: openstorage/stork:2.2.4\n"
"        resources:\n"
"          requests:\n"
"            cpu: '0.1'\n"
"        securityContext:\n"
"          privileged: false\n"
"        name: stork\n"
msgstr ""
"spec:\n"
"      containers:\n"
"      - command:\n"
"        - /stork\n"
"        - --driver=pxd\n"
"        - --verbose\n"
"        - --leader-elect=true\n"
"        # Uncomment the line below if you want to enable the feature to\n"
"        # automatically update schedulerName\n"
"        #- --app-initializer=true\n"
"        imagePullPolicy: Always\n"
"        image: openstorage/stork:2.2.4\n"
"        resources:\n"
"          requests:\n"
"            cpu: '0.1'\n"
"        securityContext:\n"
"          privileged: false\n"
"        name: stork\n"

#. type: Plain text
msgid ""
"Here we need to change the `--driver=pxd` parameter, which chooses the "
"Portworx driver by default, to use the LINSTOR driver instead: `--"
"driver=linstor`"
msgstr ""
"ここでは LINSTOR ドライバーを使用するように、デフォルトで Portworx ドライバー"
"を選択する `--driver=pxd` パラメータを `--driver=linstor` に変更する必要があ"
"ります。"

#. type: Plain text
msgid ""
"A few lines below, `image: openstorage/stork:2.2.4` specifies that the "
"vanilla Stork image should be used; however, since we want to use LINBIT's "
"image with the included LINSTOR driver instead, we change it to `image: "
"linbit/stork:latest`"
msgstr ""
"また、 `image: openstorage/stork:2.2.4` は vanilla Stork イメージを使用するこ"
"とを指定しています。ここで、LINSTOR ドライバーで LINBIT のイメージを使用した"
"いので、これを `image: linbit/stork:latest` に変更します。"

#. type: Plain text
msgid "Now we can deploy stork:"
msgstr "これで stork をデプロイできます。"

#. type: delimited block -
#, no-wrap
msgid "kubectl create -f stork-deployment.yaml\n"
msgstr "kubectl create -f stork-deployment.yaml\n"

#. type: Plain text
msgid "This should start a few Stork pods:"
msgstr "これにより、いくつかの Stork ポッドが開始されます。"

#. type: delimited block -
#, no-wrap
msgid ""
"$ kubectl get pods --namespace kube-system\n"
"NAME                                                READY   STATUS    RESTARTS   AGE\n"
"...\n"
"stork-58ffcc4844-9xmlc                              1/1     Running   0          16m\n"
"stork-58ffcc4844-nh9pb                              1/1     Running   0          16m\n"
"stork-58ffcc4844-zbvns                              1/1     Running   0          16m\n"
"...\n"
msgstr ""
"$ kubectl get pods --namespace kube-system\n"
"NAME                                                READY   STATUS    RESTARTS   AGE\n"
"...\n"
"stork-58ffcc4844-9xmlc                              1/1     Running   0          16m\n"
"stork-58ffcc4844-nh9pb                              1/1     Running   0          16m\n"
"stork-58ffcc4844-zbvns                              1/1     Running   0          16m\n"
"...\n"

#. type: Plain text
msgid ""
"Once these pods are up and running, we can start a new Kubernetes scheduler "
"instance which uses Stork to make its scheduling decisions. There is also "
"another possibility to accomplish this -- configuring the default scheduler "
"to work with Stork -- which will not be covered in this guide. Please refer "
"to https://github.com/libopenstorage/stork#run-stork-in-your-kubernetes-"
"cluster[the upstream Stork documentation] for more information on this "
"process."
msgstr ""
"これらのポッドが起動して実行されると、Stork を使用してスケジューリングの決定"
"を行う新しい Kubernetes スケジューラインスタンスを開始できます。また、これを"
"達成する別の方法もあります。--Stork で動作するようにデフォルトのスケジュー"
"ラーを構成する-- このガイドでは触れませんが、詳細は https://github.com/"
"libopenstorage/stork#run-stork-in-your-kubernetes-cluster[the upstream Stork "
"documentation] を参照ください。"

#. type: Plain text
msgid ""
"Stork provides another yaml file to start a scheduler instance: https://"
"github.com/libopenstorage/stork/blob/master/specs/stork-scheduler.yaml[stork-"
"scheduler.yaml]."
msgstr ""
"Storkは、スケジューラインスタンスを開始するための別の yaml ファイルも提供しま"
"す (https://github.com/libopenstorage/stork/blob/master/specs/stork-"
"scheduler.yaml[stork-scheduler.yaml]) 。"

#. type: Plain text
msgid ""
"Again, we need to slightly modify the file for it to work. More precisely, "
"we need to specify which version of the Kubernetes scheduler we want to "
"deploy.  Find this section near the bottom of the file:"
msgstr ""
"繰り返しになりますが、正しく機能させるには、ファイルを少し変更する必要があり"
"ます。正確には、デプロイする Kubernetes スケジューラのバージョンを指定する必"
"要があります。ファイルの下方近くに以下のセクションがあります。"

#. type: delimited block -
#, no-wrap
msgid ""
"spec:\n"
"      containers:\n"
"      - command:\n"
"        - /usr/local/bin/kube-scheduler\n"
"        - --address=0.0.0.0\n"
"        - --leader-elect=true\n"
"        - --scheduler-name=stork\n"
"        - --policy-configmap=stork-config\n"
"        - --policy-configmap-namespace=kube-system\n"
"        - --lock-object-name=stork-scheduler\n"
"        image: gcr.io/google_containers/kube-scheduler-amd64:<kube_version>\n"
msgstr ""
"spec:\n"
"      containers:\n"
"      - command:\n"
"        - /usr/local/bin/kube-scheduler\n"
"        - --address=0.0.0.0\n"
"        - --leader-elect=true\n"
"        - --scheduler-name=stork\n"
"        - --policy-configmap=stork-config\n"
"        - --policy-configmap-namespace=kube-system\n"
"        - --lock-object-name=stork-scheduler\n"
"        image: gcr.io/google_containers/kube-scheduler-amd64:<kube_version>\n"

#. type: Plain text
msgid ""
"We need to substitute `<kube_version>` for the Kubernetes version our "
"cluster is running."
msgstr ""
"`<kube_version>` をクラスターが実行されている Kubernetes のバージョンに置き換"
"える必要があります。"

#. type: delimited block -
#, no-wrap
msgid ""
"$ kubectl version\n"
"Client Version: version.Info{Major:\"1\", Minor:\"15+\", GitVersion:\"v1.15.8-beta.0\", GitCommit:\"6c143d35bb11d74970e7bc0b6c45b6bfdffc0bd4\", GitTreeState:\"archive\", BuildDate:\"2020-01-29T00:00:00Z\", GoVersion:\"go1.14beta1\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n"
"Server Version: version.Info{Major:\"1\", Minor:\"16\", GitVersion:\"v1.16.8\", GitCommit:\"ec6eb119b81be488b030e849b9e64fda4caaf33c\", GitTreeState:\"clean\", BuildDate:\"2020-03-12T20:52:22Z\", GoVersion:\"go1.13.8\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n"
msgstr ""
"$ kubectl version\n"
"Client Version: version.Info{Major:\"1\", Minor:\"15+\", GitVersion:\"v1.15.8-beta.0\", GitCommit:\"6c143d35bb11d74970e7bc0b6c45b6bfdffc0bd4\", GitTreeState:\"archive\", BuildDate:\"2020-01-29T00:00:00Z\", GoVersion:\"go1.14beta1\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n"
"Server Version: version.Info{Major:\"1\", Minor:\"16\", GitVersion:\"v1.16.8\", GitCommit:\"ec6eb119b81be488b030e849b9e64fda4caaf33c\", GitTreeState:\"clean\", BuildDate:\"2020-03-12T20:52:22Z\", GoVersion:\"go1.13.8\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n"

#. type: Plain text
msgid ""
"In this case, we can see that under _Server Version_ the `GitVersion` is "
"`v1.16.8`, so we would replace this line with:"
msgstr ""
"この場合、 _Server Version_ の下で `GitVersion` が `v1.16.8` であることを確認"
"できるため、この行を次のように置き換えます。"

#. type: delimited block -
#, no-wrap
msgid "        image: gcr.io/google_containers/kube-scheduler-amd64:v1.16.8\n"
msgstr "        image: gcr.io/google_containers/kube-scheduler-amd64:v1.16.8\n"

#. type: Plain text
msgid "Now we can create the scheduler deployment:"
msgstr "これで、スケジューラデプロイメントを作成できます。"

#. type: delimited block -
#, no-wrap
msgid "kubectl create -f stork-scheduler.yaml\n"
msgstr "kubectl create -f stork-scheduler.yaml\n"

#. type: Plain text
msgid "This should have spawned a few more pods:"
msgstr "これにより、いくつかのポッドが生成されます。"

#. type: delimited block -
#, no-wrap
msgid ""
"$ kubectl get pods --namespace kube-system\n"
"NAME                                                READY   STATUS    RESTARTS   AGE\n"
"...\n"
"stork-scheduler-f7888f8f5-6djfw                     1/1     Running   0          12m\n"
"stork-scheduler-f7888f8f5-jlrrs                     1/1     Running   0          12m\n"
"stork-scheduler-f7888f8f5-nqqhz                     1/1     Running   0          12m\n"
"...\n"
msgstr ""
"$ kubectl get pods --namespace kube-system\n"
"NAME                                                READY   STATUS    RESTARTS   AGE\n"
"...\n"
"stork-scheduler-f7888f8f5-6djfw                     1/1     Running   0          12m\n"
"stork-scheduler-f7888f8f5-jlrrs                     1/1     Running   0          12m\n"
"stork-scheduler-f7888f8f5-nqqhz                     1/1     Running   0          12m\n"
"...\n"

#. type: Plain text
msgid ""
"Now that the scheduler is running, we can create a pod which uses it by "
"specifying the scheduler's name under `spec.schedulerName`."
msgstr ""
"スケジューラが実行されたので `spec.schedulerName` でスケジューラの名前を指定"
"することにより、それを使用するポッドを作成できます。"

#. type: Block title
#, no-wrap
msgid "my-first-stork-pod.yaml"
msgstr "my-first-stork-pod.yaml"

#. type: delimited block -
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: Pod\n"
"metadata:\n"
"  name: fedora\n"
"  namespace: default\n"
"spec:\n"
"  schedulerName: stork\n"
"  containers:\n"
"  - name: fedora\n"
"    image: fedora\n"
"    command: [/bin/bash]\n"
"    args: [\"-c\", \"while true; do sleep 10; done\"]\n"
"    volumeMounts:\n"
"    - name: linstor-volume-pvc\n"
"      mountPath: /data\n"
"    ports:\n"
"    - containerPort: 80\n"
"  volumes:\n"
"  - name: linstor-volume-pvc\n"
"    persistentVolumeClaim:\n"
"      claimName: \"linstor-volume-pvc\"\n"
msgstr ""
"apiVersion: v1\n"
"kind: Pod\n"
"metadata:\n"
"  name: fedora\n"
"  namespace: default\n"
"spec:\n"
"  schedulerName: stork\n"
"  containers:\n"
"  - name: fedora\n"
"    image: fedora\n"
"    command: [/bin/bash]\n"
"    args: [\"-c\", \"while true; do sleep 10; done\"]\n"
"    volumeMounts:\n"
"    - name: linstor-volume-pvc\n"
"      mountPath: /data\n"
"    ports:\n"
"    - containerPort: 80\n"
"  volumes:\n"
"  - name: linstor-volume-pvc\n"
"    persistentVolumeClaim:\n"
"      claimName: \"linstor-volume-pvc\"\n"

#. type: Plain text
msgid ""
"Now the scheduler will make sure to place the pod on a node which has fast "
"access to `linstor-volume-pvc`."
msgstr ""
"これで、スケジューラはポッドを `linstor-volume-pvc` への高速アクセスが可能な"
"ノードに確実に配置します。"

#. type: Title ====
#, no-wrap
msgid "Configuring the Stork LINSTOR Driver"
msgstr "Stork LINSTOR ドライバーの構成"

#. type: Plain text
msgid ""
"The LINSTOR driver included in Stork can be parameterized to change how "
"Stork connects to the LINSTOR controller."
msgstr ""
"Stork に含まれる LINSTOR ドライバーをパラメータ化して、Stork が LINSTOR コン"
"トローラに接続する方法を変更できます。"

#. type: Plain text
msgid ""
"This can be accomplished by setting certain environment variables for the "
"Stork container in its deployment."
msgstr ""
"これはデプロイメント内の Stork コンテナに特定の環境変数を設定することで実現で"
"きます。"

#. type: Block title
#, no-wrap
msgid "stork-deployment.yaml"
msgstr "stork-deployment.yaml"

#. type: delimited block -
#, no-wrap
msgid ""
"apiVersion: apps/v1\n"
"kind: Deployment\n"
"# ...\n"
"spec:\n"
"  # ...\n"
"  template:\n"
"    # ...\n"
"    spec:\n"
"      containers:\n"
"      - command:\n"
"        - /stork\n"
"        - --driver=linstor\n"
"        - --verbose\n"
"        - --leader-elect=true\n"
"        imagePullPolicy: Always\n"
"        image: linbit/stork:latest\n"
"        resources:\n"
"          requests:\n"
"            cpu: '0.1'\n"
"        securityContext:\n"
"          privileged: false\n"
"        name: stork\n"
"        env:\n"
"        - name: LS_ENDPOINT\n"
"          value: https://linstor-controller:3371\n"
"        - name: LS_USER_CERTIFICATE\n"
"          valueFrom:\n"
"            secretKeyRef:\n"
"              key: tls.crt\n"
"              name: linstor-client-tls\n"
"        - name: LS_USER_KEY\n"
"          valueFrom:\n"
"            secretKeyRef:\n"
"              key: tls.key\n"
"              name: linstor-client-tls\n"
"        - name: LS_ROOT_CA\n"
"          valueFrom:\n"
"            secretKeyRef:\n"
"              key: ca.crt\n"
"              name: linstor-client-tls\n"
msgstr ""
"apiVersion: apps/v1\n"
"kind: Deployment\n"
"# ...\n"
"spec:\n"
"  # ...\n"
"  template:\n"
"    # ...\n"
"    spec:\n"
"      containers:\n"
"      - command:\n"
"        - /stork\n"
"        - --driver=linstor\n"
"        - --verbose\n"
"        - --leader-elect=true\n"
"        imagePullPolicy: Always\n"
"        image: linbit/stork:latest\n"
"        resources:\n"
"          requests:\n"
"            cpu: '0.1'\n"
"        securityContext:\n"
"          privileged: false\n"
"        name: stork\n"
"        env:\n"
"        - name: LS_ENDPOINT\n"
"          value: https://linstor-controller:3371\n"
"        - name: LS_USER_CERTIFICATE\n"
"          valueFrom:\n"
"            secretKeyRef:\n"
"              key: tls.crt\n"
"              name: linstor-client-tls\n"
"        - name: LS_USER_KEY\n"
"          valueFrom:\n"
"            secretKeyRef:\n"
"              key: tls.key\n"
"              name: linstor-client-tls\n"
"        - name: LS_ROOT_CA\n"
"          valueFrom:\n"
"            secretKeyRef:\n"
"              key: ca.crt\n"
"              name: linstor-client-tls\n"

#. type: Plain text
msgid ""
"The `LS_ENDPOINT` variable can be set to an URL where the LINSTOR controller "
"can be found. If this is not set, Stork defaults to looking for an endpoint "
"called `linstor-op-cs` and connects to it."
msgstr ""
"`LS_ENDPOINT` 変数は、LINSTOR コントローラが存在する URL に設定できます。これ"
"が設定されていない場合、Stork はデフォルトで `linstor-op-cs` というエンドポイ"
"ントを探してそれに接続します。"

#. type: Plain text
msgid ""
"`LS_USER_CERTIFICATE`, `LS_USER_KEY`, and `LS_ROOT_CA` can be used to "
"configure encrypted communication with the LINSTOR controller using TLS."
msgstr ""
"`LS_USER_CERTIFICATE`, `LS_USER_KEY` および `LS_ROOT_CA` は、TLS を使用して "
"LINSTOR コントローラとの暗号化通信を構成するために使用できます。"

#. type: Title ===
#, no-wrap
msgid "Advanced Configuration"
msgstr "高度な設定"

#. type: Plain text
msgid ""
"In general, all configuration for LINSTOR volumes in Kubernetes should be "
"done via the _StorageClass_ parameters, as seen with the _storagePool_ in "
"the basic example above. We'll give all the available options an in-depth "
"treatment here."
msgstr ""
"KubernetesのLinstorボリュームのすべての構成は、上で使用したサンプルのように"
"_StorageClass_ のパラメータ経由で設定されます。以下に利用可能なオプションの詳"
"細を示します。"

#. type: Title ====
#, no-wrap
msgid "nodeList"
msgstr "nodeList"

#. type: Plain text
msgid ""
"`nodeList` is a list of nodes for volumes to be assigned to. This will "
"assign the volume to each node and it will be replicated among all of them. "
"This can also be used to select a single node by hostname, but it's more "
"flexible to use <<s-kubernetes-replicasonsame,replicasOnSame>> to select a "
"single node."
msgstr ""
"`nodeList` はボリュームが割り当てられるノードのリストです。ボリュームがそれぞ"
"れのノードに割り当てられそれらの間で複製が行われます。これはホスト名で１つの"
"ノードを指定できますが、 これには <<s-kubernetes-replicasonsame,"
"replicasOnSame>> を使うほうが柔軟性があります。"

#. type: Plain text
msgid ""
"If you use this option, you must not use <<s-kubernetes-autoplace,"
"autoPlace>>."
msgstr ""
"このオプションを使用する場合は <<s-kubernetes-autoplace,autoPlace>> を使用し"
"ないでください。"

#. type: Plain text
msgid ""
"This option determines on which LINSTOR nodes the underlying storage for "
"volumes will be provisioned and is orthogonal from which _kubelets_ these "
"volumes will be accessible."
msgstr ""
"このオプションは、ボリュームのストレージをどのLINSTORノード上でプロビジョニン"
"グするかを決定し、 _kubelets_ からこれらのボリュームにアクセスできるようにし"
"ます。"

#. type: Plain text
msgid "Example: `nodeList: \"node-a node-b node-c\"`"
msgstr "例: `nodeList: \"node-a node-b node-c\"`"

#. type: Plain text
msgid "Example: `nodeList: \"node-a\"`"
msgstr "例: `nodeList: \"node-a\"`"

#. type: Title ====
#, no-wrap
msgid "autoPlace"
msgstr "autoPlace"

#. type: Plain text
msgid ""
"`autoPlace` is an integer that determines the amount of replicas a volume of "
"this _StorageClass_ will have.  For instance, `autoPlace: 3` will produce "
"volumes with three-way replication. If neither `autoPlace` nor `nodeList` "
"are set, volumes will be <<s-autoplace-linstor,automatically placed>> on one "
"node."
msgstr ""
"`autoPlace` はこの _StorageClass_ が持つボリュームの複製数を指定します。例え"
"ば、 `autoPlace: 3` は３つの複製をもつボリュームを生成します。 `autoPlace` ま"
"たは `nodeList` が指定されていない場合は、１つのノード上にボリュームが生成さ"
"れます。<<s-autoplace-linstor,自動配備>> を参照ください。"

#. type: Plain text
msgid ""
"If you use this option, you must not use <<s-kubernetes-nodelist,nodeList>>."
msgstr ""
"このオプションを使用する場合は、 <<s-kubernetes-nodelist,nodeList>> を使用し"
"ないでください。"

#. type: Plain text
msgid ""
"This option (and all options which affect autoplacement behavior) modifies "
"the number of LINSTOR nodes on which the underlying storage for volumes will "
"be provisioned and is orthogonal to which _kubelets_ those volumes will be "
"accessible from."
msgstr ""
"このオプション（および自動配置の動作に影響を与えるすべてのオプション）は、ボ"
"リューム用のストレージがプロビジョニングされるLINSTORノードの数を変更し、 "
"_kubelets_ からこれらのボリュームにアクセスできるようにします。"

#. type: Plain text
msgid "Example: `autoPlace: 2`"
msgstr "例: `autoPlace: 2`"

#. type: Plain text
msgid "Default: `autoPlace: 1`"
msgstr "例: `autoPlace: 1`"

#. type: Title ====
#, no-wrap
msgid "replicasOnSame"
msgstr "replicasOnSame"

#.  These should link to the linstor documentation about node properties, but those
#.  do not exist at the time of this commit.
#. type: Plain text
msgid ""
"`replicasOnSame` is a list of key=value pairs used as required autoplacement "
"selection labels when <<s-kubernetes-autoplace,autoplace>> is used to "
"determine where to provision storage. These labels correspond to LINSTOR "
"node aux props. Please note both the key and value names are user-defined "
"and arbitrary. Let's explore this behavior with examples assuming a LINSTOR "
"cluster such that `node-a` is configured with the following aux props "
"`zone=z1` and `role=backups`, while `node-b` is configured with only "
"`zone=z1`."
msgstr ""
"`replicasOnSame` は、 <<s-kubernetes-autoplace,autoplace>> がストレージをプロ"
"ビジョニングする場所を決定するために使用されるときは必須の自動配置選択ラベル"
"で、 key = value のペアのリストです。これらのラベルは、LINSTORノードの aux "
"prop に対応しています。キーと値の名前はどちらもユーザー定義で任意です。"
"LINSTORクラスタ `node-a` が aux props `zone=z1` と `role=backups` , `node-b` "
"が `zone=z1` のみを持つと仮定します。"

#. type: Plain text
msgid ""
"If we configure a _StorageClass_ with `autoPlace: \"1\"` and "
"`replicasOnSame: \"zone=z1 role=backups\"`, then all volumes created from "
"that _StorageClass_ will be provisioned on `node-a`, since that is the only "
"node with all of the correct key=value pairs in the LINSTOR cluster. This is "
"the most flexible way to select a single node for provisioning."
msgstr ""
"`autoPlace: \"1\"` と `replicasOnSame: \"zone=z1 role=backups\"` を持つ "
"_StorageClass_ を設定すると、この _StorageClass_ から生成されるすべてのボ"
"リュームは `node-a` にプロビジョニングされます。これは LINSTOR クラスタ内です"
"べての key = value ペアを持つ唯一のノードだからです。これは、プロビジョニング"
"に１つのノードを選択する最も柔軟な方法です。"

#. type: Plain text
msgid ""
"If we configure a _StorageClass_ with `autoPlace: \"1\"` and "
"`replicasOnSame: \"zone=z1\"`, then volumes will be provisioned on either "
"`node-a` or `node-b` as they both have the `zone=z1` aux prop."
msgstr ""
"`autoPlace: \"1\"` と `replicasOnSame: \"zone=z1\"` を持つ _StorageClass_ を"
"設定すると、ボリュームは `node-a` か `node-b` のどちらかにプロビジョニングさ"
"れます。これは、両方が `zone=z1` aux prop を持つからです。"

#. type: Plain text
msgid ""
"If we configure a _StorageClass_ with `autoPlace: \"2\"` and "
"`replicasOnSame: \"zone=z1 role=backups\"`, then provisioning will fail, as "
"there are not two or more nodes that have the appropriate aux props."
msgstr ""
"`autoPlace: \"2\"` と `replicasOnSame: \"zone=z1 role=backups\"` を持つ "
"_StorageClass_ を設定すると、適切な aux prop を持つノードが2つ以上ないためプ"
"ロビジョニングは失敗します。"

#. type: Plain text
msgid ""
"If we configure a _StorageClass_ with `autoPlace: \"2\"` and "
"`replicasOnSame: \"zone=z1\"`, then volumes will be provisioned on both "
"`node-a` and `node-b` as they both have the `zone=z1` aux prop."
msgstr ""
"`autoPlace: \"2\"` と `replicasOnSame: \"zone=z1\"` を持つ _StorageClass_ を"
"設定すると、ボリュームは `node-a` と `node-b` の両方にプロビジョニングされま"
"す。これは、両方が `zone=z1` aux prop を持つからです。"

#. type: Plain text
msgid "Example: `replicasOnSame: \"zone=z1 role=backups\"`"
msgstr "例: `replicasOnSame: \"zone=z1 role=backups\"`"

#. type: Title ====
#, no-wrap
msgid "replicasOnDifferent"
msgstr "replicasOnDifferent"

#. type: Plain text
msgid ""
"`replicasOnDifferent` is a list of key=value pairs to avoid as autoplacement "
"selection. It is the inverse of <<s-kubernetes-replicasonsame,"
"replicasOnSame>>."
msgstr ""
"`replicasOnDifferent` は自動配置選択として避けるための key=value のペアのリス"
"トです。 <<s-kubernetes-replicasonsame,replicasOnSame>> の逆のものです。"

#. type: Plain text
msgid "Example: `replicasOnDifferent: \"no-csi-volumes=true\"`"
msgstr "例: `replicasOnDifferent: \"no-csi-volumes=true\"`"

#. type: Title ====
#, no-wrap
msgid "localStoragePolicy"
msgstr "localStoragePolicy"

#. type: Plain text
msgid ""
"`localStoragePolicy` determines, via volume topology, which LINSTOR "
"__Satellite__s volumes should be assigned and from where Kubernetes will "
"access volumes. The behavior of each option is explained below in detail."
msgstr ""
"`localStoragePolicy` はボリュームトポロジを通して、どの LINSTOR _Satellite_ "
"ボリュームを割り当てるべきか、そして Kubernetes がどこからボリュームにアクセ"
"スするかを決定します。各オプションの動作については、後ほど詳しく説明します。"

#. type: Plain text
msgid ""
"If you specify a <<s-kubernetes-nodelist,nodeList>>, volumes will be created "
"on those nodes, irrespective of the `localStoragePolicy`; however, the "
"accessibility reporting will still be as described."
msgstr ""
"<<s-kubernetes-nodelist,nodeList>> を指定すると、`localStoragePolicy` に関係"
"なく、ボリュームはそれらのノード上に作成されます。ただし、アクセスに関するレ"
"ポートでは説明どおりになります。"

#. type: Plain text
msgid ""
"You must set `volumeBindingMode: WaitForFirstConsumer` in the _StorageClass_ "
"and the LINSTOR __Satellite__s running on the __kubelet__s must be able to "
"support the diskfull placement of volumes as they are configured in that "
"_StorageClass_ for <<s-kubernetes-localstoragepolicy-required,required>> or "
"<<s-kubernetes-localstoragepolicy-preferred,preferred>> to work properly."
msgstr ""
"_StorageClass_ で `volumeBindingMode：WaitForFirstConsumer` を設定する必要が"
"あります。また、__kubelet__ 上で実行している LINSTOR __Satellite__ は、 <<s-"
"kubernetes-localstoragepolicy-required,required>> または <<s-kubernetes-"
"localstoragepolicy-preferred,preferred>> が正しく動作するように、その "
"_StorageClass_ で構成されているボリュームのディスクフル配置をサポートできる必"
"要があります。"

#. type: Plain text
msgid ""
"Use `topologyKey: \"linbit.com/hostname\"` rather than `topologyKey: "
"\"kubernetes.io/hostname\"` if you are setting `affinity` in your _Pod_ or "
"_StatefulSet_ specs."
msgstr ""
"_Pod_ や _StatefulSet_ の spec で affinity を設定している場合、 "
"`topologyKey：\"kubernetes.io/hostname\"` ではなく `topologyKey：\"linbit."
"com/hostname\"` を使用してください。"

#. type: Plain text
msgid "Example: `localStoragePolicy: required`"
msgstr "例: `localStoragePolicy: required`"

#. type: Title =====
#, no-wrap
msgid "ignore (default)"
msgstr "ignore (デフォルト)"

#. type: Plain text
msgid ""
"When `localStoragePolicy` is set to `ignore`, regular autoplacement occurs "
"based on <<s-kubernetes-autoplace,autoplace>>, <<s-kubernetes-replicasonsame,"
"replicasOnSame>>, and <<s-kubernetes-replicasonsame,replicasOnDifferent>>. "
"Volume location will not affect _Pod_ scheduling in Kubernetes and the "
"volumes will be accessed over the network if they're not local to the "
"_kubelet_ where the _Pod_ was scheduled."
msgstr ""
"`localStoragePolicy` が `ignore` に設定されている場合、通常の自動配置が <<s-"
"kubernetes-autoplace,autoplace>>, <<s-kubernetes-replicasonsame,"
"replicasOnSame>>, <<s-kubernetes-replicasonsame,replicasOnDifferent>> に基づ"
"いて行われます。 ボリュームの場所は、Kubernetes での _Pod_ スケジューリングに"
"影響を与えず、ボリュームが _Pod_ がスケジュールされた _kubelet_ にローカルで"
"ない場合でも、ネットワークを介してアクセスされます。"

#. type: Title =====
#, no-wrap
msgid "required"
msgstr "required"

#. type: Plain text
msgid ""
"When `localStoragePolicy` is set to `required`, Kubernetes will report a "
"list of places that it wants to schedule a _Pod_ in order of preference. The "
"plugin will attempt to provision the volume(s) according to that preference. "
"The number of volumes to be provisioned in total is based off of <<s-"
"kubernetes-autoplace,autoplace>>."
msgstr ""
"`localStoragePolicy` が `required` に設定されていると、Kubernetes は設定に"
"従って _Pod_ をスケジュールしたい場所のリストを報告します。プラグインはその設"
"定に従ってボリュームのプロビジョニングを試みます。プロビジョニングされるボ"
"リューム数の合計は <<s-kubernetes-autoplace,autoplace>> に基づいています。"

#. type: Plain text
msgid ""
"If all preferences have been attempted, but no volumes where successfully "
"assigned volume creation will fail."
msgstr ""
"すべての設定が試行されたが、正常に割り当てられたボリュームがない場合、ボ"
"リュームの作成は失敗します。"

#. type: Plain text
msgid ""
"In case of multiple replicas when all preferences have been attempted, and "
"at least one has succeeded, but there are still replicas remaining to be "
"provisioned, <<s-kubernetes-autoplace,autoplace>> behavior will apply for "
"the remaining volumes."
msgstr ""
"複製が複数ある場合、すべての設定が試行され、少なくとも1つが成功したときに、ま"
"だプロビジョニングされる複製が残っている場合、 <<s-kubernetes-autoplace,"
"autoplace>> が残りのボリュームに動作が適用されます。"

#. type: Plain text
msgid ""
"With this option set, Kubernetes will consider volumes that are not locally "
"present on a _kubelet_ to be unaccessible from that _kubelet_."
msgstr ""
"このオプションを設定すると、Kubernetes は _kubelet_ にローカルに存在しないボ"
"リュームはその _kubelet_ からアクセスできないと見なします。"

#. type: Title =====
#, no-wrap
msgid "preferred"
msgstr "preferred"

#. type: Plain text
msgid ""
"When `localStoragePolicy` is set to `preferred`, volume placement behavior "
"will be the same as when it's set to <<s-kubernetes-localstoragepolicy-"
"required,required>> with the exception that volume creation will not fail if "
"no preference was able to be satisfied.  Volume accessibility will be the "
"same as when set to <<s-kubernetes-localstoragepolicy-ignore,ignore>>."
msgstr ""
"`localStoragePolicy` が `preferred` に設定されている場合、ボリューム配置の動"
"作は、設定を満たすことができなかった場合でも、ボリュームの作成は失敗しないと"
"いう点を除いて <<s-kubernetes-localstoragepolicy-required,required>> と同じで"
"す。ボリュームへのアクセスは <<s-kubernetes-localstoragepolicy-ignore,"
"ignore>> に設定した場合と同じになります。"

#. type: Title ====
#, no-wrap
msgid "storagePool"
msgstr "storagePool"

#. type: Plain text
msgid ""
"`storagePool` is the name of the LINSTOR <<s-storage_pools,storage pool>> "
"that will be used to provide storage to the newly-created volumes."
msgstr ""
"`storagePool` は LINSTOR <<s-storage_pools,ストレージプール>> の名前で、新規"
"に作成されたボリュームにストレージを供給するときに使用されます。"

#. type: Plain text
msgid ""
"Only nodes configured with this same _storage pool_ with be considered for "
"<<s-kubernetes-autoplace,autoplacement>>. Likewise, for _StorageClasses_ "
"using <<s-kubernetes-nodelist,nodeList>> all nodes specified in that list "
"must have this _storage pool_ configured on them."
msgstr ""
"これと同じ _storage pool_ で構成されたノードのみが <<s-kubernetes-autoplace,"
"autoplacement>> に使用されます。同様に <<s-kubernetes-nodelist,nodeList>> を"
"使う _StorageClasses_ ではそのリストで指定されたすべてのノードが _storage "
"pool_ を構成している必要があります。"

#. type: Plain text
msgid "Example: `storagePool: my-storage-pool`"
msgstr "例: `storagePool: my-storage-pool`"

#. type: Title ====
#, no-wrap
msgid "disklessStoragePool"
msgstr "disklessStoragePool"

#.  This should link to the linstor section talking about diskless storage pools
#.  when that gets written.
#. type: Plain text
msgid ""
"`disklessStoragePool` is an optional parameter that only effects LINSTOR "
"volumes assigned disklessly to _kubelets_ i.e., as clients. If you have a "
"custom _diskless storage pool_ defined in LINSTOR, you'll specify that here."
msgstr ""
"`disklessStoragePool` はオプションでノードが _kubelets_ にディスクレス、すな"
"わちクライアントとして割り当てられるようにするときに使用します。LINSTOR でカ"
"スタムディスクレスストレージプールが定義されている場合は、ここで指定します。"

#. type: Plain text
msgid "Example: `disklessStoragePool: my-custom-diskless-pool`"
msgstr "例: `disklessStoragePool: my-custom-diskless-pool`"

#. type: Title ====
#, no-wrap
msgid "encryption"
msgstr "encryption"

#. type: Plain text
msgid ""
"`encryption` is an optional parameter that determines whether to encrypt "
"volumes. LINSTOR must be <<s-linstor-encrypted-Volumes,configured for "
"encryption>> for this to work properly."
msgstr ""
"`encryption` はオプションで、ボリュームを暗号化するかどうかを指定します。"
"LINSTOR はこれが正しく動作するように適切に設定されている必要があります。"

#. type: Plain text
msgid "Example: `encryption: \"true\"`"
msgstr "例: `encryption: \"true\"`"

#. type: Title ====
#, no-wrap
msgid "filesystem"
msgstr "filesystem"

#. type: Plain text
msgid ""
"`filesystem` is an option parameter to specify the filesystem for non raw "
"block volumes. Currently supported options are `xfs` and `ext4`."
msgstr ""
"`filesystem` は下位のブロックボリュームのファイルシステムを指定するためのオプ"
"ションパラメータです。現在サポートされているオプションは `xfs` と `ext4` で"
"す。"

#. type: Plain text
msgid "Example: `filesystem: \"xfs\"`"
msgstr "例: `filesystem: \"xfs\"`"

#. type: Plain text
msgid "Default: `filesystem: \"ext4\"`"
msgstr "デフォルト: `filesystem: \"ext4\"`"

#. type: Title ====
#, no-wrap
msgid "fsOpts"
msgstr "fsOpts"

#. type: Plain text
msgid ""
"`fsOpts` is an optional parameter that passes options to the volume's "
"filesystem at creation time."
msgstr ""
"`fsOpts` はオプションで、作成時にボリュームのファイルシステムに渡すオプション"
"を指定します。"

#. type: Plain text
msgid ""
"Please note these values are specific to your chosen <<s-kubernetes-"
"filesystem, filesystem>>."
msgstr ""
"これらの値は選択した <<s-kubernetes-filesystem, filesystem>> 固有です。"

#. type: Plain text
msgid "Example: `fsOpts: \"-b 2048\"`"
msgstr "例: `fsOpts: \"-b 2048\"`"

#. type: Title ====
#, no-wrap
msgid "mountOpts"
msgstr "mountOpts"

#. type: Plain text
msgid ""
"`mountOpts` is an optional parameter that passes options to the volume's "
"filesystem at mount time."
msgstr ""
"`mountOpts` はオプションで、マウント時にボリュームのファイルシステムに渡すオ"
"プションを指定します。"

#. type: Plain text
msgid "Example: `mountOpts: \"sync,noatime\"`"
msgstr "例: `mountOpts: \"sync,noatime\"`"
